/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : test_sm.sm
 */

#include "Test.h"
#include "test_sm.h"

using namespace statemap;

// Static class declarations.
test_Init test::Init("test::Init", 0);
test_Finish test::Finish("test::Finish", 1);

void TestState::backToInit(testContext& context)
{
    Default(context);
    return;
}

void TestState::leaveInit(testContext& context)
{
    Default(context);
    return;
}

void TestState::Default(testContext& context)
{
    if (context.getDebugFlag() == true)
    {
        TRACE("TRANSITION   : Default\n\r");
    }

    throw (
        TransitionUndefinedException(
            context.getState().getName(),
            context.getTransition()));

    return;
}

void test_Init::Entry(testContext& context)

{
    Test& ctxt(context.getOwner());

    ctxt.sayHello("Init");
    return;
}

void test_Init::Exit(testContext& context)

{
    Test& ctxt(context.getOwner());

    ctxt.sayGoodbye("Init");
    return;
}

void test_Init::leaveInit(testContext& context)
{

    if (context.getDebugFlag() == true)
    {
        TRACE("LEAVING STATE   : test::Init\n\r");
    }

    (context.getState()).Exit(context);
    if (context.getDebugFlag() == true)
    {
        TRACE("ENTER TRANSITION: test::Init::leaveInit()\n\r");
    }

    if (context.getDebugFlag() == true)
    {
        TRACE("EXIT TRANSITION : test::Init::leaveInit()\n\r");
    }

    context.setState(test::Finish);
    (context.getState()).Entry(context);

    return;
}

void test_Finish::backToInit(testContext& context)
{

    if (context.getDebugFlag() == true)
    {
        TRACE("LEAVING STATE   : test::Finish\n\r");
    }

    (context.getState()).Exit(context);
    if (context.getDebugFlag() == true)
    {
        TRACE("ENTER TRANSITION: test::Finish::backToInit()\n\r");
    }

    if (context.getDebugFlag() == true)
    {
        TRACE("EXIT TRANSITION : test::Finish::backToInit()\n\r");
    }

    context.setState(test::Init);
    (context.getState()).Entry(context);

    return;
}

/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */
