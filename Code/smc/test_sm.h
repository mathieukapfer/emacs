#ifndef _H_TEST_SM
#define _H_TEST_SM

/*
 * ex: set ro:
 * DO NOT EDIT.
 * generated by smc (http://smc.sourceforge.net/)
 * from file : test_sm.sm
 */


#include <statemap.h>

// Forward declarations.
class test;
class test_Init;
class test_Finish;
class test_Default;
class TestState;
class testContext;
class Test;

class TestState :
    public statemap::State
{
public:

    TestState(const char *name, int stateId)
    : statemap::State(name, stateId)
    {};

    virtual void Entry(testContext&) {};
    virtual void Exit(testContext&) {};

    virtual void backToInit(testContext& context);
    virtual void leaveInit(testContext& context);

protected:

    virtual void Default(testContext& context);
};

class test
{
public:

    static test_Init Init;
    static test_Finish Finish;
};

class test_Default :
    public TestState
{
public:

    test_Default(const char *name, int stateId)
    : TestState(name, stateId)
    {};

};

class test_Init :
    public test_Default
{
public:
    test_Init(const char *name, int stateId)
    : test_Default(name, stateId)
    {};

    void Entry(testContext&);
    void Exit(testContext&);
    void leaveInit(testContext& context);
};

class test_Finish :
    public test_Default
{
public:
    test_Finish(const char *name, int stateId)
    : test_Default(name, stateId)
    {};

    void backToInit(testContext& context);
};

class testContext :
    public statemap::FSMContext
{
public:

    testContext(Test& owner)
    : FSMContext(test::Init),
      _owner(owner)
    {};

    testContext(Test& owner, const statemap::State& state)
    : FSMContext(state),
      _owner(owner)
    {};

    virtual void enterStartState()
    {
        getState().Entry(*this);
        return;
    }

    Test& getOwner() const
    {
        return (_owner);
    };

    TestState& getState() const
    {
        if (_state == NULL)
        {
            throw statemap::StateUndefinedException();
        }

        return (dynamic_cast<TestState&>(*_state));
    };

    void backToInit()
    {
        setTransition("backToInit");
        (getState()).backToInit(*this);
        setTransition(NULL);
    };

    void leaveInit()
    {
        setTransition("leaveInit");
        (getState()).leaveInit(*this);
        setTransition(NULL);
    };

private:

    Test& _owner;
};


/*
 * Local variables:
 *  buffer-read-only: t
 * End:
 */

#endif // _H_TEST_SM
